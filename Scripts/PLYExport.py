# PLYExport.py

import bpy

class PLYExportOperator( bpy.types.Operator ):
    """Export object to PLY format."""
    
    bl_idname = "object.ply_export_operator"
    bl_label = "PLY Object Exporter"

    @classmethod
    def poll( cls, context ):
        return context.active_object is not None

    def execute( self, context ):
        
        obj = context.active_object

        vert_list = list( obj.data.vertices )
        poly_list = list( obj.data.polygons )

        ply_export = 'ply\n'
        ply_export += 'format ascii 1.0\n'
        ply_export += 'comment Generated by PLYExportOperator registered with Blender.\n'
        ply_export += 'element vertex ' + str( len( vert_list ) ) + '\n'
        ply_export += 'property float x\n'
        ply_export += 'property float y\n'
        ply_export += 'property float z\n'
        ply_export += 'property float nx\n'
        ply_export += 'property float ny\n'
        ply_export += 'property float nz\n'
        ply_export += 'property float u\n'
        ply_export += 'property float v\n'
        ply_export += 'element face ' + str( len( poly_list ) ) + '\n'
        ply_export += 'property list uchar int vertex_indices\n'
        ply_export += 'end_header\n'

        for vert in vert_list:
            co = obj.matrix_world * vert.co
            ply_export += '%f %f %f\n' % ( co.x, co.y, co.z )

        for poly in poly_list:
            ply_export += str( poly.loop_total ) + ' '
            loop_stop = poly.loop_start + poly.loop_total
            for loop_index in range( poly.loop_start, loop_stop ):
                ply_export += str( obj.data.loops[ loop_index ].vertex_index ) + ' '
            ply_export += '\n'

        print( ply_export )

        return {'FINISHED'}

def register():
    bpy.utils.register_class( PLYExportOperator )

def unregister():
    bpy.utils.unregister_class( PLYExportOperator )

if __name__ == "__main__":
    register()